kafka.bootstrapServers=YOUR.KAFKA.BOOTSTRAP.SERVERS.COM:9092,YOUR.KAFKA.BOOTSTRAP.SERVERS.COM:9092
kafka.defaultKeyDeserializerClass=org.apache.kafka.common.serialization.StringDeserializer
kafka.defaultValueDeserializerClass=io.telicent.federator.access.AccessMessageDeserializer
kafka.consumerGroup=server.consumer
kafka.pollDuration=PT10S
kafka.pollRecords=100
## kafka.topic.prefix default is empty string
## Decides which kafka headers are shared. This is a '^' separated list
shared.headers=Security-Label^Content-Type
## share all data default is false
filter.shareAll=true
# Below references the filter class in the injected jar that will be used for federation decisons. 
# No class is provided (blank) so the default test class is used. If a jar is put in the 
# federator_poc/docker/filter directory and the package and class name referenced below then 
# it is picked up by the classpath and injected as the filter for the federation engine. 
# e.g. io.telicent.federator.filter.KafkaEventHeaderAttributeAccessFilter
filter.classname=
## Pick if Diode or GRPC (default)
server.diode=false
## GRPC client name used to identify them
client.name=telicent.io
server.port=8080
# Default server.tlsEnabled for the GRPc server is false
server.tlsEnabled=false
## If server.tlsEnabled is set then you need set the file path to the cert chain file
#server.certChainFile=
## If server.tlsEnabled is set then you need set the file path to the private key file
#server.privateKeyFile=
## Default server.keepAliveTime for the GRPC server is 5 secs
server.keepAliveTime=10
## Default server.keepAliveTimeout for the GRPC server is 1 sec
#server.keepAliveTimeout=
server.accessMapValueFile=/access-map/access.json
